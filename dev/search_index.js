var documenterSearchIndex = {"docs":
[{"location":"optional/#Optional-packages","page":"Optional packages","title":"Optional packages","text":"","category":"section"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"For CMEMS data, you need optionally the python package copernicusmarine (installation instructions).","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"For example:","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"python3 -m pip install copernicusmarine","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"Normally you will see the warning WARNING: The script motuclient is installed in '.../.local/bin' which is not on PATH. Consider adding this directory to PATH. You need to add the following line to the file .bashrc located in your home directory (at the end of this file on a separate line):","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"export PATH=\"$HOME/.local/bin:$PATH\"","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"In a terminal execute the following so that this change takes effect:","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"source ~/.bashrc","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"Check the copernicusmarine (it may return vUnknown, but it should not return No module named copernicusmarine)","category":"page"},{"location":"optional/","page":"Optional packages","title":"Optional packages","text":"copernicusmarine --version","category":"page"},{"location":"plots/#Plotting-ROMS-results-and-input-files","page":"Plots","title":"Plotting ROMS results and input files","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"The aim here is to visualize the model files with generic plotting and analsis packages rather than to use a model specific visualization tool which hides many details and might lack of flexibility. The necessary files are already in the directory containing the model simulation and its parent direction (ROMS-implementation-test). Downloading the files is only needed if you did not run the simulation.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"grid_fname = \"LS2v.nc\"\n\nif !isfile(grid_fname)\n    download(\"https://dox.ulg.ac.be/index.php/s/J9DXhUPXbyLADJa/download\",grid_fname)\nend\n\nfname = \"roms_his.nc\"\nif !isfile(fname)\n    download(\"https://dox.ulg.ac.be/index.php/s/17UWsY7tRNMDf4w/download\",fname)\nend","category":"page"},{"location":"plots/#Bathymetry","page":"Plots","title":"Bathymetry","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"In this example, the bathymetry defined in the grid file is visualized. Make sure that your current working directory contains the file LS2v.nc (use e.g. ;cd ~/ROMS-implementation-test)","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"using ROMS, PythonPlot, NCDatasets, GeoDatasets, Statistics\n\nds_grid = NCDataset(\"LS2v.nc\");\nlon = ds_grid[\"lon_rho\"][:,:];\nlat = ds_grid[\"lat_rho\"][:,:];\nh = nomissing(ds_grid[\"h\"][:,:],NaN);\nmask_rho = ds_grid[\"mask_rho\"][:,:];\n\nclf();\nfigure(figsize=(7,4))\nhmask = copy(h)\nhmask[mask_rho .== 0] .= NaN;\npcolormesh(lon,lat,hmask);\n#colorbar(orientation=\"horizontal\")\ncolorbar()\ngca().set_aspect(1/cosd(mean(lat)))\n\ntitle(\"smoothed bathymetry [m]\");\nsavefig(\"smoothed_bathymetry.png\"); nothing # hide","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"(Image: )","category":"page"},{"location":"plots/#Surface-temperature","page":"Plots","title":"Surface temperature","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"The surface surface temperature (or salinity) of the model output or climatology file can be visualized as follows. The parameter n is the time instance to plot. Make sure that your current working directory contains the file to plot (use e.g. ;cd ~/ROMS-implementation-test/ to plot roms_his.nc)","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"# instance to plot\nn = 1\n\nds = NCDataset(\"roms_his.nc\")\ntemp = nomissing(ds[\"temp\"][:,:,end,n],NaN);\ntemp[mask_rho .== 0] .= NaN;\n\nif haskey(ds,\"time\")\n    # for the climatology file\n    time = ds[\"time\"][:]\nelse\n    # for ROMS output\n    time = ds[\"ocean_time\"][:]\nend\n\nclf();\npcolormesh(lon,lat,temp)\ngca().set_aspect(1/cosd(mean(lat)))\ncolorbar();\ntitle(\"sea surface temperature [°C]\")\nsavefig(\"SST.png\"); nothing # hide","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"(Image: )","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"Exercise:","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"Plot salinity\nPlot different time instance (n)\nWhere do we specify that the surface values are to be plotted? Plot different layers.","category":"page"},{"location":"plots/#Surface-velocity-and-elevation","page":"Plots","title":"Surface velocity and elevation","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"zeta = nomissing(ds[\"zeta\"][:,:,n],NaN)\nu = nomissing(ds[\"u\"][:,:,end,n],NaN);\nv = nomissing(ds[\"v\"][:,:,end,n],NaN);\n\nmask_u = ds_grid[\"mask_u\"][:,:];\nmask_v = ds_grid[\"mask_v\"][:,:];\n\nu[mask_u .== 0] .= NaN;\nv[mask_v .== 0] .= NaN;\nzeta[mask_rho .== 0] .= NaN;\n\n# ROMS uses an Arakawa C grid\nu_r = cat(u[1:1,:], (u[2:end,:] .+ u[1:end-1,:])/2, u[end:end,:], dims=1);\nv_r = cat(v[:,1:1], (v[:,2:end] .+ v[:,1:end-1])/2, v[:,end:end], dims=2);\n\n# all sizes should be the same\nsize(u_r), size(v_r), size(mask_rho)\n\nclf();\npcolormesh(lon,lat,zeta)\ncolorbar();\n# plot only a single arrow for r x r grid cells\nr = 3;\ni = 1:r:size(lon,1);\nj = 1:r:size(lon,2);\nq = quiver(lon[i,j],lat[i,j],u_r[i,j],v_r[i,j])\nquiverkey(q,0.9,0.85,1,\"1 m/s\",coordinates=\"axes\")\ntitle(\"surface currents [m/s] and elevation [m]\");\ngca().set_aspect(1/cosd(mean(lat)))\nsavefig(\"surface_zeta_uv.png\"); nothing # hide","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"(Image: )","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"Exercise:","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"The surface currents seems to follow lines of constant surface elevation. Explain why this is to be expected.","category":"page"},{"location":"plots/#Vertical-section","page":"Plots","title":"Vertical section","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"In this example we will plot a vertical section by slicing the model output at a given index.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"It is very important that the parameters (opt) defining the vertical layer match the parameters values choosen when ROMS was setup.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"opt = (\n    Tcline = 50,   # m\n    theta_s = 5,   # surface refinement\n    theta_b = 0.4, # bottom refinement\n    nlevels = 32,  # number of vertical levels\n    Vtransform  = 2,\n    Vstretching = 4,\n)\n\nhmin = minimum(h)\nhc = min(hmin,opt.Tcline)\nz_r = ROMS.set_depth(opt.Vtransform, opt.Vstretching,\n                   opt.theta_s, opt.theta_b, hc, opt.nlevels,\n                   1, h);\n\ntemp = nomissing(ds[\"temp\"][:,:,:,n],NaN);\n\nmask3 = repeat(mask_rho,inner=(1,1,opt.nlevels))\nlon3 = repeat(lon,inner=(1,1,opt.nlevels))\nlat3 = repeat(lat,inner=(1,1,opt.nlevels))\n\ntemp[mask3 .== 0] .= NaN;\n\ni = 20;\n\nclf()\ncontourf(lat3[i,:,:],z_r[i,:,:],temp[i,:,:],40)\nylim(-300,0);\nxlabel(\"latitude\")\nylabel(\"depth [m]\")\ntitle(\"temperature at $(round(lon[i,1],sigdigits=4)) °E\")\ncolorbar();\n\n# inset plot\nax2 = gcf().add_axes([0.1,0.18,0.4,0.3])\nax2.pcolormesh(lon,lat,temp[:,:,end])\nax2.set_aspect(1/cosd(mean(lat)))\nax2.plot(lon[i,[1,end]],lat[i,[1,end]],\"m\")\n\nsavefig(\"temp_section1.png\"); nothing # hide","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"(Image: temp_section1)","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"Exercise:","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"Plot a section at different longitude and latitude","category":"page"},{"location":"plots/#Horizontal-section","page":"Plots","title":"Horizontal section","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"A horizontal at the fixed depth of 200 m is extracted and plotted.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"tempi = ROMS.model_interp3(lon,lat,z_r,temp,lon,lat,[-200])\nmlon,mlat,mdata = GeoDatasets.landseamask(resolution='f', grid=1.25)\n\nclf();\npcolormesh(lon,lat,tempi[:,:,1])\ncolorbar();\nax = axis()\ncontourf(mlon,mlat,mdata',[0.5, 3],colors=[\"gray\"])\naxis(ax)\ngca().set_aspect(1/cosd(mean(lat)))\ntitle(\"temperature at 200 m [°C]\")\nsavefig(\"temp_hsection_200.png\"); nothing # hide","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"(Image: )","category":"page"},{"location":"plots/#Arbitrary-vertical-section","page":"Plots","title":"Arbitrary vertical section","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"The vectors section_lon and section_lat define the coordinates where we want to extract the surface temperature.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"section_lon = LinRange(8.18, 8.7,100);\nsection_lat = LinRange(43.95, 43.53,100);\n\nusing Interpolations\n\nfunction section_interp(v)\n    itp = interpolate((lon[:,1],lat[1,:]),v,Gridded(Linear()))\n    return itp.(section_lon,section_lat)\nend\n\nsection_temp = mapslices(section_interp,temp,dims=(1,2))\nsection_z = mapslices(section_interp,z_r,dims=(1,2))\n\nsection_x = repeat(section_lon,inner=(1,size(temp,3)))\n\nclf()\ncontourf(section_x,section_z[:,1,:],section_temp[:,1,:],50)\nylim(-500,0)\ncolorbar()\nxlabel(\"longitude\")\nylabel(\"depth\")\ntitle(\"temperature section [°C]\");\n\nax2 = gcf().add_axes([0.4,0.2,0.4,0.3])\nax2.pcolormesh(lon,lat,temp[:,:,end])\naxis(\"on\")\nax2.set_aspect(1/cosd(mean(lat)))\nax2.plot(section_lon,section_lat,\"m\")\n\nsavefig(\"temp_vsection.png\");","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"(Image: )","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Model-grid","page":"Reference","title":"Model grid","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ROMS.create_grid\nROMS.smoothgrid\nROMS.stiffness_ratios\nROMS.reduce_res\nROMS.stretching\nROMS.Grid\nROMS.generate_grid\nROMS.nudgecoef\nROMS.diffusion2!","category":"page"},{"location":"reference/#ROMS.create_grid","page":"Reference","title":"ROMS.create_grid","text":"ROMS.create_grid(fname,h,f,lon_r,lat_r,mask_r,angle,pm,pn,dndx,dmde)\n\nCreate a NetCDF grid file fname using the bathymetry h, Coriolis parameter f and longitude, latitude, mask, angle and strechting factors are rho-points.\n\nnote: Note\nThis function currently only works for non-rotated grids (angle = 0) and the spherical grids.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.smoothgrid","page":"Reference","title":"ROMS.smoothgrid","text":"hsmooth = smoothgrid(h,hmin,rmax)\n\nSmooth the topography to get a maximum r factor equalt to rmax\n\nThe original code is from Pierrick Penven from Roms_tools. Copyright (c) 2002-2006 by Pierrick Penven, GPL\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.stiffness_ratios","page":"Reference","title":"ROMS.stiffness_ratios","text":"rx0,rx1 = ROMS.stiffness_ratios(mask_u,mask_v,z_w)\nrx0,rx1 = ROMS.stiffness_ratios(domain)\n\nCompute maximum grid stiffness ratios following Beckmann and Haidvogel (rx0) and Haney (rx1).\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.reduce_res","page":"Reference","title":"ROMS.reduce_res","text":" field = reduce_res(field,red);\n\nreduce resolution of field field by a factor \"red\"\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.stretching","page":"Reference","title":"ROMS.stretching","text":"s,C = stretching(Vstretching, theta_s, theta_b, hc, N, kgrid, report)\n\nCompute ROMS vertical coordinate stretching function.\n\nGiven vertical terrain-following vertical stretching parameters, this routine computes the vertical stretching function used in ROMS vertical coordinate transformation. Check the following (link)[https://www.myroms.org/wiki/index.php/Vertical_S-coordinate] for details:\n\nOn Input:\n\nVstretching:   Vertical stretching function:\n\n                   Vstretching = 1,  original (Song and Haidvogel, 1994)\n                   Vstretching = 2,  A. Shchepetkin (UCLA-ROMS, 2005)\n                   Vstretching = 3,  R. Geyer BBL refinement\n                   Vstretching = 4,  A. Shchepetkin (UCLA-ROMS, 2010)\n                   Vstretching = 5,  Quadractic (Souza et al., 2015)\n\ntheta_s:       S-coordinate surface control parameter (scalar)\ntheta_b:       S-coordinate bottom control parameter (scalar)\nhc:            Width (m) of surface or bottom boundary layer in which                  higher vertical resolution is required during                  stretching (scalar)\nN:             Number of vertical levels (scalar)\nkgrid         Depth grid type logical switch:                  kgrid = 0,        function at vertical RHO-points                  kgrid = 1,        function at vertical W-points\nreport        Flag to report detailed information (OPTIONAL):                  report = false,   do not report                  report = true,    report information\n\nOn Output:\n\ns:             S-coordinate independent variable, [-1 <= s <= 0] at                  vertical RHO- or W-points (vector)\nC:             Nondimensional, monotonic, vertical stretching function,                  C(s), 1D array, [-1 <= C(s) <= 0]\n\nThe code is ported from the matlab code stretching.m from Hernan G. Arango. Copyright (c) 2002-2020 The ROMS/TOMS Group, Licensed under a MIT/X style license\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.Grid","page":"Reference","title":"ROMS.Grid","text":"grid = ROMS.Grid(grid_fname,opt)\n\nLoads the ROMS grid from a NetCDF file grid_fname. The grid structure contains the longitude, latitude, depth (z), angle and mask at rho, u, v and w points for a C-grid.\n\nnote: Note\ngrid.z corresponds to an elevation equal to zero.\n\nExample\n\nopt = (\n    Tcline = 50,   # m\n    theta_s = 5,   # surface refinement\n    theta_b = 0.4, # bottom refinement\n    nlevels = 32,  # number of vertical levels\n    Vtransform  = 2,\n    Vstretching = 4,\n)\ngrid = ROMS.Grid(expanduser(\"~/Models/LS2v/LS2v.nc\"),opt)\n\n\n\n\n\n","category":"type"},{"location":"reference/#ROMS.generate_grid","page":"Reference","title":"ROMS.generate_grid","text":"ROMS.generate_grid(grid_fname,bath_name,xr,yr,red,opt,hmin,rmax)\n\nGenerate the netCDF file grid_fname representing the model grid from the bathymetry file bath_name. The domain is bounded by the longitude range xr and the latitude range yr. The resolution of the bathymetry is reduced by the factors red[1] and red[2] in the longitude and latitude directions. opt is tuple with additional parameters describing the vertical axis. hmin and rmax is the minimum depth and rmax is the smoothness parameter of the bathymetry. The r parameter is defined as:\n\nr = maxleft( undersetijmax frach_ij - h_i+1jh_ij + h_i+1j  undersetijmax frach_ij - h_ij+1h_ij + h_ij+1 right)\n\nThe parameter opt contains for example:\n\n# model specific parameters\nopt = (\n    Tcline = 50,   # m\n    theta_s = 5,   # surface refinement\n    theta_b = 0.4, # bottom refinement\n    nlevels = 32,  # number of vertical levels\n    Vtransform  = 2,\n    Vstretching = 4,\n)\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.nudgecoef","page":"Reference","title":"ROMS.nudgecoef","text":"nudgecoef(domain,nudge_filename,alpha,Niter,halo,tscale; max_tscale = 5e5)\n\nGenerate trace nudging coefficients with a value of 1/tscale at the open boundaries over a halo grid cells. coefficients field smoothed spatially with a diffusion coefficient alpha over Niter iterations. For grid cells where the nudging time scale exceeds max_tscale, nudging is disabled (coefficient is set to zero).\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.diffusion2!","page":"Reference","title":"ROMS.diffusion2!","text":" diffusion2!(f,alpha,Niter)\n\nTwo-dimensional diffusion of field f. f is the initial condition of field. alpha is a vector or tuple with two elements corresponding to the diffusion coefficient (multiplied by grid spacing) for the two dimensions. Niter is the number of iterations. On output, f is the field after Niter iterations.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Bathymetry","page":"Reference","title":"Bathymetry","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ROMS.gebco_load","category":"page"},{"location":"reference/#ROMS.gebco_load","page":"Reference","title":"ROMS.gebco_load","text":"x,y,b = gebco_load(bath_name,xr,yr)\n\nLoads GEBCO bathymetry with lon and lat range xr, yr.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Boundary-conditions-and-initial-conditions","page":"Reference","title":"Boundary conditions and initial conditions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ROMS.CMEMS_zarr\nROMS.load\nROMS.interp_clim\nROMS.extract_ic\nROMS.extract_bc","category":"page"},{"location":"reference/#ROMS.CMEMS_zarr","page":"Reference","title":"ROMS.CMEMS_zarr","text":"ds = ROMS.CMEMS_zarr(product_id,mapping,cachedir;\n                chunks = 60,\n                time_shift = 0,\n                kwargs...\n                )\n\nReturns a structure ds to connect to a CMEMS zarr server. The mapping parameter contains a dictorary linking the NetCDF CF standard namer to the underlying NetCDF variable names and the product identifers (more information is available in the product user manual). cachedir is a directory where the products are downloaded for caching.\n\nWhile for most datasets (and CMEMS in the past) the time represents the central time the time axis. However since 2024, the time in the CMEMS Zarr data represents now the beginning of the time interval. Therefore time_shift has to be added to the time variable to account for this difference. For example, if for a daily dataset, the first time instance is the average from 2000-01-01:00:00:00 to 2000-01-02:00:00:00, then the Zarr file records 2000-01-01:00:00:00 (the beginning for the averaging interval) rather than 2000-01-01:12:00:00 (the center for the averaging interval). In this case, time_shift should be 12*60*60 (12 hours in seconds).\n\nExample\n\nThe  values of product_id and mapping (with dataset_id)  below are specific to the Mediterranean Sea and must be adapted for other domains.\n\noutdir = \"/tmp\"\nproduct_id = \"MEDSEA_MULTIYEAR_PHY_006_004\"\nmapping = Dict(\n    # var  dataset_id\n    :sea_surface_height_above_geoid => \"med-cmcc-ssh-an-fc-d\",\n    :sea_water_potential_temperature => \"med-cmcc-tem-an-fc-d\",\n    :sea_water_salinity => \"med-cmcc-sal-an-fc-d\",\n    :eastward_sea_water_velocity => \"med-cmcc-cur-an-fc-d\",\n    :northward_sea_water_velocity => \"med-cmcc-cur-an-fc-d\",\n)\n\ndataset = ROMS.CMEMS_zarr(product_id,mapping,outdir,time_shift = 12*60*60)\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.load","page":"Reference","title":"ROMS.load","text":"v,(x,y,z,t) = ROMS.load(ds,name::Symbol; kwargs...)\n\nLoads a variable from a remote resource ds. name is the NetCDF CF standard name.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.interp_clim","page":"Reference","title":"ROMS.interp_clim","text":"ROMS.interp_clim(domain,clim_filename,dataset,timerange;\n                 padding = 0.5,\n                 missing_value = -9999.)\n\nInterpolate dataset on the the model grid domain and creating the climatology file clim_filename for all dates between timerange[1] and timerange[2].\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.extract_ic","page":"Reference","title":"ROMS.extract_ic","text":"ROMS.extract_ic(domain,clim_filename,icfile,t0::DateTime;\n                time_origin = DateTime(1858,11,17))\n\nFrom the climatology clim_filename extract a single time instance at the time t0 (or the nearest) and save the result into icfile.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.extract_bc","page":"Reference","title":"ROMS.extract_bc","text":"ROMS.extract_bc(domain,clim_filename,bc_filename; missing_value = 9999)\n\nFrom the climatology clim_filename extract the boundary conditions at all open boundaries (using the mask in domain) and save the result into the netCDF nc_filename.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Atmospheric-forcings","page":"Reference","title":"Atmospheric forcings","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ROMS.prepare_ecmwf\nROMS.gfs_url\nROMS.download_gfs\nROMS.prepare_gfs","category":"page"},{"location":"reference/#ROMS.prepare_ecmwf","page":"Reference","title":"ROMS.prepare_ecmwf","text":"ROMS.prepare_ecmwf(\n   atmo_fname,Vnames,filename_prefix,domain_name;\n   time_origin = DateTime(1858,11,17),\n   reset_accumulation = time -> Time(time) in (Time(0,0),Time(12,0)),\n)\n\nGenerate ROMS forcing fields from the ECMWF data file atmo_fname. Note that some variables are accumulated. Per default, the accumulation is reset at 00:00 and 12:00 UTC. The accumulation period is determined from the time resolution (usually 3 hours).\n\nNote ERA5 reanalysis (hourly data): Accumulations are performed over the hour.\n\nExample\n\ndatadir = \"...\"\natmo_fname = joinpath(datadir,\"ecmwf_sample_data.nc\")\nfilename_prefix = joinpath(datadir,\"liguriansea_\")\ndomain_name = \"Ligurian Sea Region\"\nVnames = [\"sustr\",\"svstr\",\"shflux\",\"swflux\",\"swrad\",\"Uwind\",\"Vwind\",\"lwrad\",\n    \"lwrad_down\",\"latent\",\"sensible\",\"cloud\",\"rain\",\"Pair\",\"Tair\",\"Qair\"]\nROMS.prepare_ecmwf(atmo_fname,Vnames,filename_prefix,domain_name)\n)\n\nBased on forcing/d_ecmwf2roms.m (svn revision 1102):\n\nCopyright (c) 2002-2017 The ROMS/TOMS Group      Hernan G. Arango\nLicensed under a MIT/X style license             John Wilkin\nSee License_ROMS.txt\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.gfs_url","page":"Reference","title":"ROMS.gfs_url","text":"url = ROMS.gfs_url(time,tau;\n         modelname = \"gfs\",\n         resolution = 0.25,\n         baseurl = \"https://rda.ucar.edu/thredds/dodsC/files/g/ds084.1/\")\n\nReturns the OPeNDAP url for the GFS data at time time (DateTime) and the forecast time tau (hours) from the archive specified at baseurl.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.download_gfs","page":"Reference","title":"ROMS.download_gfs","text":"atmo_src = ROMS.download_gfs(xr,yr,tr,cachedir)\n\nDownloads GFS 0.25° model results from the NCAR Research Data Archive within the longitude range xr, latitude range yr and time range tr. Ranges are list of two elements with the start and end value. Results are saved in cachedir.\n\nSee ROMS.prepage_gfs for an example.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.prepare_gfs","page":"Reference","title":"ROMS.prepare_gfs","text":"ROMS.prepare_gfs(\n   atmo_src,Vnames,filename_prefix,domain_name;\n   time_origin = DateTime(1858,11,17),\n)\n\nGenerate ROMS forcing fields from GFS data atmo_src (a generated by ROMS.download_gfs). The other arguments are the same as for ROMS.prepage_ecmwf. The example below shows all currently supported values for Vnames.\n\nExample\n\ntr = (DateTime(2019,1,1),DateTime(2019,1,7))\nxr = (7.5, 12.375)\nyr = (41.875, 44.625)\n\ncachedir = expanduser(\"~/tmp/GFS\")\natmo_src = ROMS.download_gfs(xr,yr,tr,cachedir)\n\nfilename_prefix = \"liguriansea_\"\ndomain_name = \"Ligurian Sea Region\"\nVnames = [\"sustr\",\"svstr\",\"swflux\",\"swrad\",\"Uwind\",\"Vwind\",\n          \"sensible\",\"cloud\",\"rain\",\"Pair\",\"Tair\",\"Qair\"]\nROMS.prepare_gfs(atmo_src,Vnames,filename_prefix,domain_name)\n)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Thermodynamics","page":"Reference","title":"Thermodynamics","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ROMS.vapor_pressure\nROMS.vapor_pressure_Buck\nROMS.relative_humidity\nROMS.latent_heat_of_vaporization","category":"page"},{"location":"reference/#ROMS.vapor_pressure","page":"Reference","title":"ROMS.vapor_pressure","text":"e = ROMS.vapor_pressure(T)\n\nactual vapor pressure in hPa (millibars) from dewpoint temperature T in degree Celsius using using [1]. If T is the air temperature, then  e is the saturated vapor pressure over liquid water is given by:\n\ne(T) = 611 cdot 10 ^ left(  frac75 T2377 + T right)\n\n[1] https://web.archive.org/web/20200926200733/https://www.weather.gov/media/epz/wxcalc/vaporPressure.pdf\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.vapor_pressure_Buck","page":"Reference","title":"ROMS.vapor_pressure_Buck","text":"e = ROMS.vapor_pressure_Buck(T)\n\nactual vapor pressure in hPa (millibars) from dewpoint temperature T in degree Celsius using using Buck (1996). If T is the air temperature, then  e is the saturated vapor pressure over liquid water is given by:\n\ne(T) = 61121 exp left(left( 18678 - fracT 2345right)left( fracT 25714 + T right)right)\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.relative_humidity","page":"Reference","title":"ROMS.relative_humidity","text":"rh = ROMS.relative_humidity(temperature_2m_C,dew_temperature_2m_C)\n\nCompute the relative humidity (between 0 and 100) from temperature at 2 m, and dew_temperature at 2 m) both in degree Celsius)\n\n[1] https://web.archive.org/web/20200926200733/https://www.weather.gov/media/epz/wxcalc/vaporPressure.pdf\n\n\n\n\n\n","category":"function"},{"location":"reference/#ROMS.latent_heat_of_vaporization","page":"Reference","title":"ROMS.latent_heat_of_vaporization","text":"λ = ROMS.latent_heat_of_vaporization(T)\n\nCompute the latent heat of vaporization λ (J/kg) of water at temperature T (in degree Celsius).\n\nThe function implements equation 2.55 (page 38) of Foken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Tutorial","title":"Tutorial","text":"This package allows to setup necessary files for the ROMS ocean model.","category":"page"},{"location":"#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"This tutorial is for students following the ULiège lecture OCEA0036-1 but might be useful for others as well.","category":"page"},{"location":"#Using-for-the-first-time-a-Linux-(or-UNIX-like)-environment?","page":"Tutorial","title":"Using for the first time a Linux (or UNIX-like) environment?","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"If you are familiar with Linux and the command line you can skip to section.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Essential shell commands:\npwd: print the name of the current working directory\nls: list all files and directories in the current working directory\ncd directory_name: change directory; \"go inside\" the directory\nmkdir directory_name: create a directory\ncp source destination: copy a file\nmv source destination: move a file\nrm file: remove a file (permanently)\nfind directory_name -name \"*foo*\": find all files under directory_name (including sub-directories) whose name contains foo.\ndiff file1 file2: compare two text files\ngnome-text-editor filename &, pluma filename & or editor filename &: open a text editor to edit a file.\nShell keyboard short cuts (also applicable to a julia session):\nup-arrow: show previous command (similarly down-arrow show next command)\nTAB: complete command or file/directory name if it is unambiguous\nTAB TAB: show all possible commands or file/directory name if multiple possibilities exists\nControl-R and type some_string: Search for a previously executed command which includes some_string.\nControl-C: cancel the previous command (be careful to not to cancel your text editor session)\nControl-D: close a shell session\nSpecial directories:\n.: current directory\n..: parent directory\n~: home directory\nPlease pay attention to the difference between upper- and lowercase letters\nPresence and absence of white space is also significant\nAvoid using directories and file names with a space in them, otherwise you need to put the directory in quotes (single or double quotes) or use black-slash (\\\\) in front of the white space. For example, shell command cd My Directory Name does not work, use one of the following instead:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cd \"My Directory Name\"\ncd 'My Directory Name'\ncd My\\ Directory\\ Name","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Check out the basic shell commands and this tutorial","category":"page"},{"location":"#Registration","page":"Tutorial","title":"Registration","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Please register at:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"ROMS (Regional Ocean Modeling System).\nCMEMS (Copernicus Marine Environment Monitoring Service)","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"To generate new forcing fields, register at (optional):","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"ECMWF (European Centre for Medium-Range Weather Forecasts). To access the operational forecast on the MARS service you will need a special permissions granted by your national weather service (in Europe). The default permission will let you access e.g. ERA5 dataset.","category":"page"},{"location":"#Required-software","page":"Tutorial","title":"Required software","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The tutorial can be run either:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"on your computer using a preconfigured virtual machine\non the machines of the ULiège computer room\ndirectly on your computer (but all software has to be installed beforehand) if you are using Ubuntu/Debian. Other Linux OS will work too, but the installation instructions must be adapted. Mac OS and Windows (using e.g. Windows Subsystem for Linux) might work too. But if you are not using Linux, it is preferable to the the virtual machine.","category":"page"},{"location":"#Preconfigured-virtual-machine","page":"Tutorial","title":"Preconfigured virtual machine","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"A preconfigured virtual machine is available here. You also need:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Virtual Box requires the Microsoft Visual C++ Redistributable which should be installed before (as of Virtual Box version 7.0.4).\nVirtual Box can be installed from here.\nThe OVA file must be imported in Virtual Box as explained in the documentation.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The account student has the password tritro. In this virtual machine, all software is already pre-installed, but must be updated using this shell commands:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cd .julia/dev/ROMS\ngit pull","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Then open a julia session (typing the julia command), and update all packages with:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"using Pkg\nPkg.update()","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Note, it is not necessary for this tutorial to update the whole operating system.","category":"page"},{"location":"#Installation-on-Ubuntu/Linux-(or-UNIX-like-operating-systems)","page":"Tutorial","title":"Installation on Ubuntu/Linux (or UNIX-like operating systems)","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"If you do not use this virtual machine the following software need to be installed:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Julia. Under Linux, you can install Julia with the following shell commands:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cd /opt/\nsudo wget https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.3-linux-x86_64.tar.gz\nsudo tar -xvf julia-1.10.3-linux-x86_64.tar.gz\nsudo rm julia-1.10.3-linux-x86_64.tar.gz\nsudo ln -s /opt/julia-1.10.3/bin/julia /usr/local/bin/julia","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"where 1.10.3 should be replaced by the version number of the current stable release. More information is available here.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Under Linux, you need to install also python3-matplotlib for PythonPlot. On Debian/Ubuntu, this packages can be installed by this command:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"sudo apt install python3-matplotlib","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Julia package, PythonPlot, NCDatasets, ROMS which can be installed by:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"using Pkg\nPkg.add(\"PythonPlot\")\nPkg.add(\"NCDatasets\")\nPkg.develop(url=\"https://github.com/Alexander-Barth/ROMS.jl\")","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"ROMS source. This example uses the version 4.0 of ROMS. We assume that the ROMS source is copied in ~/src/roms:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"mkdir ~/src/\ncd ~/src/\ngit clone https://github.com/myroms/roms\ncd roms\ngit checkout roms-4.0","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The output of the last command will tell you that You are in 'detached HEAD' state. (this is not an error).","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Other required software typically available from a package manager:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"A Fortran 90 compiler (e.g. gfortran)\nGNU make\nNetCDF (including headers files for development and the tools ncdump, nf-config)\nperl\nPython and pip\nMPI (optional)\ngit (optional)","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Note that all libraries (NetCDF and MPI) must be compiled with the same Fortran compiler.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"On Windows, various ways exist to install gfortran, GNU make and other dependencies:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Windows Subsystem for Linux\nInstallation guide\nFAQ (in particular exchanging files)\nCygwin\nMSYS2\nLinux virtual machine using e.g. VirtualBox\n...","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"On MacOS X:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Homebrew\n...","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"On Debian/Ubuntu, these packages can be installed by this command:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"sudo apt install gfortran make perl netcdf-bin libnetcdff-dev libopenmpi-dev openmpi-bin git python3-pip python3-setuptools unzip","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"For ECMWF data, you need the package ecmwf-api-client (optional). Follow the installation instructions (including the ECMWF key). For questions related to ECMWF data access please also consult this document.\nNote that the ECMWF key is different from your ECMWF password.","category":"page"},{"location":"#Install-or-update-the-ROMS.jl-julia-package","page":"Tutorial","title":"Install or update the ROMS.jl julia package","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Install ROMS.jl by using the following command:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"using Pkg\nPkg.develop(url=\"https://github.com/Alexander-Barth/ROMS.jl\")","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Make sure to use the latest version by using this shell commands:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cd .julia/dev/ROMS\ngit pull","category":"page"},{"location":"#Check-your-environment","page":"Tutorial","title":"Check your environment","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Check julia version:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"julia --version","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Check the Fortran Compiler","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"gfortran --version","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"MPI","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"mpif90 --version\nmpirun --help","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"NetCDF","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"nf-config --all","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"or the old name nc-config:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"nc-config --all","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"If you have nc-config (with Fortran support) but not nf-config, you can run the following:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"ln -s /usr/bin/nc-config $HOME/bin/nf-config","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Or set later the environemt variable NF_CONFIG to nc-config.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"These commands should return a basic usage info or the version number if they are correctly installed.","category":"page"},{"location":"#Data","page":"Tutorial","title":"Data","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The full GEBCO bathymetry (a subset for the Ligurian Sea is already included in the virtual machine)","category":"page"},{"location":"#Area","page":"Tutorial","title":"Area","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Choose an area:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"What interesting processes are present in your studied area? (note: now we all use the Ligurian Sea)\nAre there in situ measurements available for your area? Look for temperature and salinity within your areas (for any time frame)\nCheck with World Ocean Database\nCMEMS in situ Thematic Assemble Centre (TAC)\nVisualize a couple of downloaded profiles:\nHints: in Julia you can use the package NCDatasets\nHow would you distribute the vertical resolution in your model represent this profile?\nCheck that your longitude/latitude/time range model of your nested model is within longitude/latitude/time range of the outer model providing the boundary conditions\nChoose the domain such to avoid unnecessary open ocean boundary conditions","category":"page"},{"location":"#Atmospheric-forcing-fields","page":"Tutorial","title":"Atmospheric forcing fields","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"For the Ligurian Sea, necessary parameters have already been prepared and are available in the file ROMS-implementation.zip. It containts data download the from","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"the ECMWF operational archive (Atmosphere/ecmwf_operational_archive_2018-12-01T00:00:00_2020-01-01T00:00:00.nc). This NetCDF file needs to be converted by the julia function ROMS.prepare_ecmwf.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The remaining of this section explained how to download data from the ECMWF operational archive (e.g. for a different domain). These instructions are not needed now.\nAdapt the file name, longitude/latitude and time range (start one day earlier, and finish one day later) in forcing_ecmwf.py and execute the script as follows:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"python3 forcing_ecmwf.py","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"List of variables (*: quantities accumulated over the integration period (\"step\"))","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"NetCDF Variable name Description\nmsl Mean sea level pressure\nu10 10 metre U wind component\nv10 10 metre V wind component\nt2m 2 metre temperature\nd2m 2 metre dewpoint temperature\ntcc Total cloud cover*\nsshf Surface sensible heat flux*\nstrd Surface thermal radiation downwards*\nssr Surface net solar radiation*\nstr Surface net thermal radiation*\newss Eastward turbulent surface stress*\nnsss Northward turbulent surface stress*\ne Evaporation*\nro Runoff*\ntp Total precipitation*\nsst Sea surface temperature\npar Photosynthetically active radiation at the surface*","category":"page"},{"location":"#Generate-initial,-boundary-conditions-and-forcing-files","page":"Tutorial","title":"Generate initial, boundary conditions and forcing files","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Adapt the example_config.jl file and call it yourdomain_config.jl where you replace yourdomain by the the name of your domain (lowercase and without space). For the Ligurian Sea, use liguriansea_config.jl.\nLongitude/latitude bounding box\nFile paths\nTime range\n...\nFor CMEMS boundary conditions:\nYou may need to adapt the CMEMS product_id and mapping (if the model domain is outside of the Mediterranean Sea)\nData will be downloaded and saved in NetCDF by \"chunks\" of 60 days in the folder OGCM under the content of the variable basedir\nYou need to remove the files in this directory if you rerun the script with a different time range.\nRun in Julia","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"include(\"yourdomain_config.jl\")","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Check the resulting files: bathymetry, initial conditions, boundary conditions, interpolated model (clim file) and visualize the these files along some sections.","category":"page"},{"location":"#ROMS-compilation","page":"Tutorial","title":"ROMS compilation","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Create a directory (avoid directory names with spaces) for your model configuration. Here we use the directory name ROMS-implementation-test in your home folder.\nCompile ROMS:\nconfigure ROMS by creating a file yourdomain.h (e.g. liguriansea.h for the Ligurian Sea) in ROMS-implementation-test:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"#define UV_ADV                    /* turn ON advection terms */\n#define UV_COR                    /* turn ON Coriolis term */\n#define DJ_GRADPS                 /* Splines density  Jacobian (Shchepetkin, 2000) */\n#define NONLIN_EOS                /* define if using nonlinear equation of state */\n#define SALINITY                  /* define if using salinity */\n#define SOLVE3D                   /* define if solving 3D primitive equations */\n#define MASKING                   /* define if there is land in the domain */\n#define TS_U3HADVECTION           /* Third-order upstream horizontal advection of tracers */\n#define TS_C4VADVECTION           /* Fourth-order centered vertical advection of tracers */\n#define TS_DIF2                   /* use to turn ON or OFF harmonic horizontal mixing  */\n#define MIX_S_UV                  /* mixing along constant S-surfaces */\n#define UV_VIS2                   /* turn ON Laplacian horizontal mixing */\n#define AVERAGES\n#define UV_QDRAG\n#define MIX_S_TS\n\n#define  MY25_MIXING\n#ifdef MY25_MIXING\n# define N2S2_HORAVG\n# define KANTHA_CLAYSON\n#endif\n\n#define ANA_BSFLUX                /* analytical bottom salinity flux */\n#define ANA_BTFLUX                /* analytical bottom temperature flux */\n#define ANA_SSFLUX\n\n#define BULK_FLUXES               /* turn ON bulk fluxes computation */\n#define CLOUDS\n#define LONGWAVE\n#define SOLAR_SOURCE","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Copy the script build_roms.sh to the directory ~/ROMS-implementation-test","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cd ~/ROMS-implementation-test\ncp ~/src/roms/ROMS/Bin/build_roms.sh build_roms.sh","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Copy it to this directory and adapt it. Here is a list of changes that I made highlighted with the diff tool.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The lines in red have been replaced by the lines in green. The plus and minus signes indicates also what has been added or removed and the @@ indicate line numbers. These markers do not have to be added manually to the file build_roms.sh.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":" diff -u /home/abarth/src/roms/ROMS/Bin/build_roms.sh build_roms.sh\n--- /home/abarth/src/roms/ROMS/Bin/build_roms.sh\t2020-10-11 21:19:08.000000000 +0200\n+++ build_roms.sh\t2020-11-06 11:16:15.484841910 +0100\n@@ -102,12 +102,12 @@\n # determine the name of the \".h\" header file with the application\n # CPP definitions.\n\n-export   ROMS_APPLICATION=UPWELLING\n+export   ROMS_APPLICATION=LigurianSea\n\n # Set a local environmental variable to define the path to the directories\n # where all this project's files are kept.\n\n-export        MY_ROOT_DIR=${HOME}/ocean/repository\n+export        MY_ROOT_DIR=${HOME}\n export     MY_PROJECT_DIR=${PWD}\n\n # The path to the user's local current ROMS source code.\n@@ -120,7 +120,7 @@\n # machine. This script is designed to more easily allow for differing paths\n # to the code and inputs on differing machines.\n\n- export       MY_ROMS_SRC=${MY_ROOT_DIR}/trunk\n+ export       MY_ROMS_SRC=${MY_ROOT_DIR}/src/roms\n\n # Set path of the directory containing makefile configuration (*.mk) files.\n # The user has the option to specify a customized version of these files\n@@ -168,13 +168,13 @@\n\n #export        USE_OpenMP=on            # shared-memory parallelism\n\n- export              FORT=ifort\n-#export              FORT=gfortran\n+# export              FORT=ifort\n+export              FORT=gfortran\n #export              FORT=pgi\n\n #export         USE_DEBUG=on            # use Fortran debugging flags\n  export         USE_LARGE=on            # activate 64-bit compilation\n-#export       USE_NETCDF4=on            # compile with NetCDF-4 library\n+export       USE_NETCDF4=on            # compile with NetCDF-4 library\n #export   USE_PARALLEL_IO=on            # Parallel I/O with NetCDF-4/HDF5\n\n","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"If you do not have the tool nf-config, you need to add this line export NF_CONFIG=nc-config.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"For ROMS 4.0 and gfortran 11.2, you need to add -fallow-argument-mismatch to FFLAGS in Compilers/Linux-gfortran.mk from the ROMS source files. This is expected to be fixed in upcoming version of ROMS.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Review your changes with:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"diff ~/src/roms/ROMS/Bin/build_roms.sh build_roms.sh","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"compile ROMS by running:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"./build_roms.sh -j 2","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"copy varinfo.dat from ~/src/roms/ROMS/External/varinfo.dat in your directory for your simulation (e.g. ROMS-implementation-test):","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cp ~/src/roms/ROMS/External/varinfo.dat .","category":"page"},{"location":"#ROMS-model-domain-configuration","page":"Tutorial","title":"ROMS model domain configuration","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"copy roms.in from ~/src/roms/User/External/roms.in in the directory ~/ROMS-implementation-test:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"cp  ~/src/roms/User/External/roms.in .","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"check the glossary at the end of this file for the meaning of the keys that we will change\nwhen editing this file, do not use \"tabs\".\nadapt MyAppCPP and change it to LIGURIANSEA\nadapt file names VARNAME, GRDNAME, ININAME, BRYNAME, CLMNAME, FRCNAME and NFFILES (varinfo.dat, LS2v.nc, ic2019.nc, bc2019.nc, clim2019.nc, liguriansea2019_*.nc, * means the different variables). NFFILES is the number of forcing files.\nalso make sure that these variables are set (number of files with boundary conditions and climatology). If they do not exist, they need to be added (before the line with BRYNAME).","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":" NBCFILES == 1\nNCLMFILES == 1","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"change Lm, Mm and N based on the dimensions of your grid (make sure to read the glossary for these variable in roms.in)\nread the desciption about \"lateral boundary conditions\" and adapt boundaries LBC:\nuse closed (Clo) for boundaries without sea-point\nfor open boundaries:\nfree-surface: Chapman implicit (Cha)\n2D U/V-momentum: Flather (Fla)\n3D U/V-momentum, temperature, salinity: Radiation with nudging (RadNud)\nmixing TKE: Radiation (Rad)\nset the starting time and time reference","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"DSTART = ...\nTIME_REF =  18581117","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"where DSTART is here the number of days since 1858-11-17 or November 17, 1858 (see also modified Julia day) of the start of the model simulation (t0 in the julia script). For instance the number of days since 2014-01-01 (year-month-day) can be computed by of following commands in Julia:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"using Dates\nDate(2020,1,1) - Date(1858,11,17)","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The inverse operation can be done with:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"using Dates\nDate(1858,11,17) + Day(58849)","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"You can use DateTime if you want to specify hour, minutes or seconds.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Adapt the length of a time step DT (in seconds) and number of time steps NTIMES\nDT can be 300 seconds\nInitially we choose:\nNTIMES -> number of time step corresponding to 2 days (e.g. 2*24*60*60/DT where DT is the time steps in seconds)\nNHIS, NAVG-> number of time steps corresponding to 1 hour\nNRST -> number of time steps correspond to 1 hour","category":"page"},{"location":"#Nudging-towards-\"climatology\"","page":"Tutorial","title":"Nudging towards \"climatology\"","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The nudging towards \"climatology\" is an optional step to avoid issue (like sharp gradients) near the open sea boundaries. A flow relexation zone can be implemented in ROMS by using the followings settings:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"LtracerCLM == T T  ! enable processing of CLIM data\nLnudgeTCLM == T T  ! nudge to CLIM data\nTNUDG == 2*10.0d0                    ! days","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Make nudging on inflow is stronger than on outflow","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"OBCFAC == 10.0d0                      ! nondimensional","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Set also NUDNAME to the file name create by the julia script.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Make sure that THETA_S, THETA_B, TCLINE, Vtransform and Vstretching match the values in your julia script.\nReview your changes with:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"diff  ~/src/roms/User/External/roms.in roms.in","category":"page"},{"location":"#Run-ROMS","page":"Tutorial","title":"Run ROMS","text":"","category":"section"},{"location":"#Run-ROMS-without-MPI","page":"Tutorial","title":"Run ROMS without MPI","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"To run ROMS without MPI, one need to disable MPI in build_roms.sh. The ROMS binary will be called romsS and call be called by:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"./romsS < roms.in | tee roms.out","category":"page"},{"location":"#Run-ROMS-with-MPI","page":"Tutorial","title":"Run ROMS with MPI","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"How many CPU cores does your machine have? You can use the command top in a shell terminal followed by 1.\nIn build_roms.sh set USE_MPI=on (which is actually the default value)\nRecompile ROMS\nChange in roms.in the parameters NtileI and NtileJ. The number of CPU cores should be NtileI * NtileJ.\nRun ROMS with, e.g.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"mpirun -np 4 ./romsM  roms.in | tee roms.out","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"where 4 is the number of cores to use. To use 4 CPUs, you need to set NtileI to 2 and NtileJ to 2.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"With the command tee the normal screen output will be place in the file roms.out but still be printed on the screen.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"A problem? What does the error message say?\nOutputs are in roms_his.nc and roms_avg.nc, plot some variables like sea surface height and sea surface temperature at the beginning and the end of the simulation.\nIn Julia, force figure 1 and to 2 to have the same color-bar.","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"figure(); p1 = pcolor(randn(3,3)); colorbar()\nfigure(); p2 = pcolor(randn(3,3)); colorbar()\np2.set_clim(p1.get_clim())","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"If everything runs fine,\nis the model still stable with a longer time steps (DT) ?\nincrease the number of time steps (NTIMES)\npossibly adapt the frequency at which you save the model results (NHIS, NAVG,NRST)","category":"page"},{"location":"#Interpreting-ROMS-output","page":"Tutorial","title":"Interpreting ROMS output","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Check minimum and maximum value of the different parameters","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":" NLM: GET_STATE - Read state initial conditions,             t = 57235 00:00:00\n                   (Grid 02, File: roms_nest_his.nc, Rec=0182, Index=1)\n                - free-surface\n                   (Min = -4.63564634E-01 Max = -3.63838434E-01)","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"The barotropic, baroclinic and Coriolis Courant number should be smaller than 1","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":" Minimum barotropic Courant Number =  2.09670689E-02\n Maximum barotropic Courant Number =  5.56799674E-01\n Maximum Coriolis   Courant Number =  1.71574766E-03","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Information\nenergy (kinetic, potential, total) and volume\nmaximum Courant number","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"   STEP   Day HH:MM:SS  KINETIC_ENRG   POTEN_ENRG    TOTAL_ENRG    NET_VOLUME  Grid\n          C => (i,j,k)       Cu            Cv            Cw         Max Speed\n\n 346200 57235 00:00:00  2.691184E-03  1.043099E+04  1.043099E+04  6.221264E+13  01\n          (079,055,30)  9.266512E-02  4.949213E-02  0.000000E+00  1.081862E+00","category":"page"},{"location":"#Validation","page":"Tutorial","title":"Validation","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Check out satellite data (e.g. sea surface temperature, sea surface height) at:","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"CMEMS\nPODAAC NASA","category":"page"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Make some comparison with satellite and the downloaded in situ observation","category":"page"},{"location":"#Hydrodynamic-model-troubleshooting","page":"Tutorial","title":"Hydrodynamic model troubleshooting","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"Hydrodynamic model troubleshooting","category":"page"},{"location":"#More-information","page":"Tutorial","title":"More information","text":"","category":"section"},{"location":"","page":"Tutorial","title":"Tutorial","text":"ROMS Wiki\nROMS Wiki Frequently Asked Questions\nK. Hedström. 2016. Technical Manual for a Coupled Sea-Ice/Ocean Circulation Model (Version 4). U.S. Dept. of the Interior, Bureau of Ocean Energy Management, Alaska OCS Region. OCS, Study BOEM 2016-037. 176 pp.","category":"page"}]
}
